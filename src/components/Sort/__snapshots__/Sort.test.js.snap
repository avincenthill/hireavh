// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sort snapshot should match the last saved snapshot 1`] = `
<div
  className="sort-container"
>
  <div
    className="sort-canvas-container"
  >
    <canvas
      className="sort-canvas"
      onClick={[Function]}
    />
  </div>
  <div
    className="sort-info-container"
  >
    <button
      className="sort-button sort-button-top"
      onClick={[Function]}
    >
      <h2
        className="sort-title"
      >
        ðŸ’­ Bubble Sort
      </h2>
      <svg
        fill="currentColor"
        height="1em"
        stroke="currentColor"
        strokeWidth="0"
        style={
          Object {
            "color": "var(--c-1)",
            "height": "var(--s-s)",
            "padding": ".5rem",
            "width": "var(--s-s)",
          }
        }
        viewBox="0 0 448 512"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z"
        />
      </svg>
    </button>
    <div
      className="sort-button-container"
    >
      <button
        className="sort-button"
        onClick={[Function]}
      >
        <svg
          fill="currentColor"
          height="1em"
          stroke="currentColor"
          strokeWidth="0"
          style={
            Object {
              "color": "var(--c-1)",
              "height": "var(--s-s)",
              "padding": ".5rem",
              "width": "var(--s-s)",
            }
          }
          viewBox="0 0 448 512"
          width="1em"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"
          />
        </svg>
      </button>
      <button
        className="sort-button"
        onClick={[Function]}
      >
        <svg
          fill="currentColor"
          height="1em"
          stroke="currentColor"
          strokeWidth="0"
          style={
            Object {
              "color": "var(--c-1)",
              "height": "var(--s-s)",
              "padding": ".5rem",
              "width": "var(--s-s)",
            }
          }
          viewBox="0 0 448 512"
          width="1em"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M384 44v424c0 6.6-5.4 12-12 12h-48c-6.6 0-12-5.4-12-12V291.6l-195.5 181C95.9 489.7 64 475.4 64 448V64c0-27.4 31.9-41.7 52.5-24.6L312 219.3V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12z"
          />
        </svg>
      </button>
      <button
        className="sort-button"
        onClick={[Function]}
      >
        <svg
          fill="currentColor"
          height="1em"
          stroke="currentColor"
          strokeWidth="0"
          style={
            Object {
              "color": "var(--c-1)",
              "height": "var(--s-s)",
              "padding": ".5rem",
              "width": "var(--s-s)",
            }
          }
          viewBox="0 0 512 512"
          width="1em"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M212.333 224.333H12c-6.627 0-12-5.373-12-12V12C0 5.373 5.373 0 12 0h48c6.627 0 12 5.373 12 12v78.112C117.773 39.279 184.26 7.47 258.175 8.007c136.906.994 246.448 111.623 246.157 248.532C504.041 393.258 393.12 504 256.333 504c-64.089 0-122.496-24.313-166.51-64.215-5.099-4.622-5.334-12.554-.467-17.42l33.967-33.967c4.474-4.474 11.662-4.717 16.401-.525C170.76 415.336 211.58 432 256.333 432c97.268 0 176-78.716 176-176 0-97.267-78.716-176-176-176-58.496 0-110.28 28.476-142.274 72.333h98.274c6.627 0 12 5.373 12 12v48c0 6.627-5.373 12-12 12z"
          />
        </svg>
      </button>
    </div>
    <p
      class="sort-description"
    >
      repeatedly step through the list, compare adjacent elements and swap them if they are in the wrong order
    </p>
    <div
      className="sort-code-container"
    >
      <pre
        style={
          Object {
            "background": "#020a0d",
            "color": "#f5fbfd",
            "display": "block",
            "margin": "0rem",
            "marginLeft": "-1rem",
          }
        }
      >
        <code>
          
    
          <span
            style={
              Object {
                "color": "#b67e72",
              }
            }
          >
            const
          </span>
           bubbleSort = 
          <span
            className="hljs-function"
            style={Object {}}
          >
            (
            <span
              style={
                Object {
                  "color": "#f7edc8",
                }
              }
            >
              array
            </span>
            ) =&gt;
          </span>
           {
      
          <span
            style={
              Object {
                "color": "#b67e72",
              }
            }
          >
            const
          </span>
           swap = 
          <span
            className="hljs-function"
            style={Object {}}
          >
            (
            <span
              style={
                Object {
                  "color": "#f7edc8",
                }
              }
            >
              array, i, j
            </span>
            ) =&gt;
          </span>
           {
        
          <span
            style={
              Object {
                "color": "#b67e72",
              }
            }
          >
            let
          </span>
           temp = array[i];
        array[i] = array[j];
        array[j] = temp;
      }

      
          <span
            style={
              Object {
                "color": "#b67e72",
              }
            }
          >
            for
          </span>
           (
          <span
            style={
              Object {
                "color": "#b67e72",
              }
            }
          >
            let
          </span>
           i = 
          <span
            style={
              Object {
                "color": "#f7edc8",
              }
            }
          >
            0
          </span>
          ; i &lt; array.length; i++) {
        
          <span
            style={
              Object {
                "color": "#b67e72",
              }
            }
          >
            for
          </span>
           (
          <span
            style={
              Object {
                "color": "#b67e72",
              }
            }
          >
            let
          </span>
           j = 
          <span
            style={
              Object {
                "color": "#f7edc8",
              }
            }
          >
            1
          </span>
          ; j &lt; array.length; j++) {
          
          <span
            style={
              Object {
                "color": "#b67e72",
              }
            }
          >
            if
          </span>
           (array[j - 
          <span
            style={
              Object {
                "color": "#f7edc8",
              }
            }
          >
            1
          </span>
          ] &gt; array[j]) {
            swap(array, j - 
          <span
            style={
              Object {
                "color": "#f7edc8",
              }
            }
          >
            1
          </span>
          , j);
          }
        }
      }

      
          <span
            style={
              Object {
                "color": "#b67e72",
              }
            }
          >
            return
          </span>
           array;
    }

    
          <span
            style={
              Object {
                "color": "#b67e72",
              }
            }
          >
            const
          </span>
           sortedArray = bubblesort(unsortedArray);
    
        </code>
      </pre>
    </div>
    <table
      className="sort-table"
    >
      <tbody>
        <tr>
          <th>
            ðŸ§® complexity
          </th>
          <th>
            ðŸ•’ time
          </th>
          <th>
            ðŸŒŒ space
          </th>
        </tr>
        <tr>
          <td>
            best
          </td>
          <td>
            Î©(n)
          </td>
          <td>
            O(1)
          </td>
        </tr>
        <tr>
          <td>
            avg
          </td>
          <td>
            Î˜(n^2)
          </td>
          <td>
            O(1)
          </td>
        </tr>
        <tr>
          <td>
            worst
          </td>
          <td>
            O(n^2)
          </td>
          <td>
            O(1)
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
`;
